use crate::lang::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
    _
}

pub Syntax: Syntax = <a: Let> => a;

Let: Syntax = {
    "let" <n: Ident> ":" <t: ValueType> "=" <l: Let> "in" <r: Let> => Syntax::Let(t.into(), n, l.into(), r.into()),
    "if" <a: Let> "then" <b: Let> "else" <c: Let> => Syntax::Alt(a.into(), b.into(), c.into()),
    <s: Func> => s,
}

Func: Syntax = {
    "(" <n: Ident> ":" <t: ValueType> ")" "=>" <s: Syntax> => Syntax::Func(t.into(), n, s.into()),
    <s: CmpExpr> => s,
}

CmpExpr: Syntax = {
    <l: CmpExpr> "<" <r: AddExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Lt).into(), l.into()).into(), r.into()),
    <l: CmpExpr> ">" <r: AddExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Gt).into(), l.into()).into(), r.into()),
    <l: CmpExpr> "<=" <r: AddExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Le).into(), l.into()).into(), r.into()),
    <l: CmpExpr> ">=" <r: AddExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Ge).into(), l.into()).into(), r.into()),
    <l: AddExpr> => l,
}

AddExpr: Syntax = {
    <l: AddExpr> "+" <r: MulExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Add).into(), l.into()).into(), r.into()),
    <l: AddExpr> "-" <r: MulExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Sub).into(), l.into()).into(), r.into()),
    <l: MulExpr> => l,
}

MulExpr: Syntax = {
    <l: MulExpr> "*" <r: UnaryExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Mul).into(), l.into()).into(), r.into()),
    <l: MulExpr> "/" <r: UnaryExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Div).into(), l.into()).into(), r.into()),
    <l: UnaryExpr> => l,
}

UnaryExpr: Syntax = {
    "-" <x: UnaryExpr> => Syntax::Apply(Syntax::Apply(Syntax::Lib(Lib::Sub).into(), Syntax::Float(0.0).into()).into(), x.into()),
    <x: Apply> => x,
}

Apply: Syntax = {
    <l: Apply> "(" <r: Syntax> ")" => Syntax::Apply(l.into(), r.into()),
    <l: Atom> => l,
}

Atom: Syntax = {
    <n: Float> => Syntax::Float(n),
    <n: Bool> => Syntax::Bool(n),
    <i: Ident> => Syntax::Var(i),
    "(" <t: Syntax> ")" => t,
}

Float: f32 = {
    <s: r"0|[1-9][0-9]*"> => s.parse::<f32>().unwrap(),
    <s: r"[0-9]*\.[0-9]+([eE][+-]?[0-9]+)?"> => s.parse::<f32>().unwrap(),
    <s: r"[0-9]+\.([eE][+-]?[0-9]+)?"> => s.parse::<f32>().unwrap(),
    <s: r"[0-9]+[eE][+-]?[0-9]+"> => s.parse::<f32>().unwrap(),
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

ValueType: ValueType = <a: TFunc> => a;

TFunc: ValueType = {
    <f: TAtom> "->" <t: TFunc> => ValueType::Func(f.into(), t.into()),
    <a: TAtom> => a,
}

TAtom: ValueType = {
    "float" => ValueType::Float,
    "(" <t: ValueType> ")" => t,
}

Ident: String = <s:r"[_a-zA-Z][_a-zA-Z0-9]*"> => s.to_string();